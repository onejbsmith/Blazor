#pragma checksum "D:\Source\Repos\Blazor\BlazorTrader\Components\PrintLinesGauge.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "46b95e76ed635eb31b6e94a071246c28b96ed084"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BlazorTrader.Components
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Source\Repos\Blazor\BlazorTrader\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Source\Repos\Blazor\BlazorTrader\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Source\Repos\Blazor\BlazorTrader\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Source\Repos\Blazor\BlazorTrader\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Source\Repos\Blazor\BlazorTrader\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Source\Repos\Blazor\BlazorTrader\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Source\Repos\Blazor\BlazorTrader\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Source\Repos\Blazor\BlazorTrader\_Imports.razor"
using BlazorTrader;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Source\Repos\Blazor\BlazorTrader\_Imports.razor"
using BlazorTrader.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\Source\Repos\Blazor\BlazorTrader\_Imports.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\Source\Repos\Blazor\BlazorTrader\_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\Source\Repos\Blazor\BlazorTrader\_Imports.razor"
using BlazorStrap;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\Source\Repos\Blazor\BlazorTrader\_Imports.razor"
using Syncfusion.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "D:\Source\Repos\Blazor\BlazorTrader\_Imports.razor"
using Syncfusion.Blazor.Calendars;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "D:\Source\Repos\Blazor\BlazorTrader\_Imports.razor"
using Syncfusion.Blazor.CircularGauge;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "D:\Source\Repos\Blazor\BlazorTrader\_Imports.razor"
using Syncfusion.Blazor.Charts;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "D:\Source\Repos\Blazor\BlazorTrader\_Imports.razor"
using Blazorise;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "D:\Source\Repos\Blazor\BlazorTrader\_Imports.razor"
using ChartJs.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Source\Repos\Blazor\BlazorTrader\Components\PrintLinesGauge.razor"
using BlazorTrader.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Source\Repos\Blazor\BlazorTrader\Components\PrintLinesGauge.razor"
using BlazorTrader.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Source\Repos\Blazor\BlazorTrader\Components\PrintLinesGauge.razor"
using BlazorTrader.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Source\Repos\Blazor\BlazorTrader\Components\PrintLinesGauge.razor"
using Blazorise.Charts;

#line default
#line hidden
#nullable disable
    public partial class PrintLinesGauge : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 54 "D:\Source\Repos\Blazor\BlazorTrader\Components\PrintLinesGauge.razor"
      

    [Parameter]
                public string symbol { get; set; }

                [Parameter]
                public int seconds { get; set; }

                [Parameter]
                public bool isPrintsSize { get; set; }

                [Parameter]
                public bool isMovement { get; set; } = false;

                LineChart<double> lineChart;

                LineChartDataset<double> buysChartDatasetData = new LineChartDataset<double>();
                LineChartDataset<double> sellsChartDatasetData = new LineChartDataset<double>();

                List<double> sellsData = new List<double>();
                List<double> buysData = new List<double>();

                static LineChartOptions xxxx = new LineChartOptions()
                {
                    Tooltips = new Tooltips() { Enabled = false },
                    Legend = new Legend() { Display = false },
                    Scales = new Scales()
                    {
                        YAxes = new List<Axis>()
            {
                    new Axis(){Display = false}
                },
                        XAxes = new List<Axis>()
            {
                    new Axis(){Display = false}
                }
                    }
                };

                protected string chartOptions = System.Text.Json.JsonSerializer.Serialize<LineChartOptions>(xxxx,

                                    new System.Text.Json.JsonSerializerOptions() { WriteIndented = true });

                protected override async Task OnInitializedAsync()
                {
                    TDAStreamerData.OnStatusesChanged += getPrintsData;
                    StateHasChanged();
                    buysChartDatasetData = GetBuyLineChartDataset(buysData);
                    sellsChartDatasetData = GetSellLineChartDataset(sellsData);
                    await Task.CompletedTask;
                }

                public void getPrintsData()
                {
                    if (isMovement)
                        TDAStreamerData.getPrintsMovementBuysSellsData(ref sellsData, ref buysData, seconds, symbol);

                    else
                        TDAStreamerData.getPrintsBuysSellsData(ref sellsData, ref buysData, seconds, isPrintsSize, symbol);

                    HandleRedraw();
                    StateHasChanged();
                }

                protected override async Task OnAfterRenderAsync(bool firstRender)
                {
                    if (firstRender)
                    {
                        HandleRedraw();
                    }
                }

                void HandleRedraw()
                {
                    buysChartDatasetData = GetBuyLineChartDataset(buysData);
                    sellsChartDatasetData = GetSellLineChartDataset(sellsData);
                    lineChart.Clear();


                    // lineChart.AddLabel(Labels);

                    lineChart.AddDataSet(buysChartDatasetData);
                    lineChart.AddDataSet(sellsChartDatasetData);
                    // lineChart.AddDataSet(GetTweenLineChartDataset(RandomizeData()));

                    //lineChart.Options = new LineChartOptions() { Scales= new Scales() {  YAxes = new List<Axe>() {  } } };

                    lineChart.Update();
                }

                LineChartDataset<double> GetBuyLineChartDataset(List<double> data)
                {
                    return new LineChartDataset<double>
                    {
                        Data =data,
                        BackgroundColor = buyBackgroundColors,
                        BorderColor = buyBorderColors,
                        Fill = true,
                        PointRadius = 2,
                        BorderDash = new List<int> { }
                    };
                }

                LineChartDataset<double> GetSellLineChartDataset(List<double> data)
                {
                    return new LineChartDataset<double>
                    {
                        Data = data,
                        BackgroundColor = sellBackgroundColors,
                        BorderColor = sellBorderColors,
                        Fill = true,
                        PointRadius = 2,
                        BorderDash = new List<int> { }
                    };
                }

                LineChartDataset<double> GetTweenLineChartDataset(List<double> data)
                {
                    return new LineChartDataset<double>
                    {
                        Data = data,
                        BackgroundColor = tweenBackgroundColors,
                        BorderColor = tweenBorderColors,
                        Fill = true,
                        PointRadius = 2,
                        BorderDash = new List<int> { }
                    };
                }

                string[] Labels = { "Red", "Blue", "Yellow", "Green", "Purple", "Orange" };
                List<string> sellBackgroundColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 0.0f), ChartColor.FromRgba(54, 162, 235, 0.2f), ChartColor.FromRgba(255, 206, 86, 0.2f), ChartColor.FromRgba(75, 192, 192, 0.2f), ChartColor.FromRgba(153, 102, 255, 0.2f), ChartColor.FromRgba(255, 159, 64, 0.2f) };
                List<string> sellBorderColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 1f), ChartColor.FromRgba(54, 162, 235, 1f), ChartColor.FromRgba(255, 206, 86, 1f), ChartColor.FromRgba(75, 192, 192, 1f), ChartColor.FromRgba(153, 102, 255, 1f), ChartColor.FromRgba(255, 159, 64, 1f) };

                List<string> buyBackgroundColors = new List<string> { ChartColor.FromRgba(99, 255, 132, 0.0f), ChartColor.FromRgba(54, 162, 235, 0.2f), ChartColor.FromRgba(255, 206, 86, 0.2f), ChartColor.FromRgba(75, 192, 192, 0.2f), ChartColor.FromRgba(153, 102, 255, 0.2f), ChartColor.FromRgba(255, 159, 64, 0.2f) };
                List<string> buyBorderColors = new List<string> { ChartColor.FromRgba(99, 255, 132, 1f), ChartColor.FromRgba(54, 162, 235, 1f), ChartColor.FromRgba(255, 206, 86, 1f), ChartColor.FromRgba(75, 192, 192, 1f), ChartColor.FromRgba(153, 102, 255, 1f), ChartColor.FromRgba(255, 159, 64, 1f) };

                List<string> tweenBackgroundColors = new List<string> { ChartColor.FromRgba(99, 132, 255, 0.0f), ChartColor.FromRgba(54, 162, 235, 0.2f), ChartColor.FromRgba(255, 206, 86, 0.2f), ChartColor.FromRgba(75, 192, 192, 0.2f), ChartColor.FromRgba(153, 102, 255, 0.2f), ChartColor.FromRgba(255, 159, 64, 0.2f) };
                List<string> tweenBorderColors = new List<string> { ChartColor.FromRgba(99, 132, 255, 1f), ChartColor.FromRgba(54, 162, 235, 1f), ChartColor.FromRgba(255, 206, 86, 1f), ChartColor.FromRgba(75, 192, 192, 1f), ChartColor.FromRgba(153, 102, 255, 1f), ChartColor.FromRgba(255, 159, 64, 1f) };

                List<double> RandomizeData()
                {
                    var r = new Random(DateTime.Now.Millisecond);

                    return new List<double> { r.Next(3, 50) * r.NextDouble(), r.Next(3, 50) * r.NextDouble(), r.Next(3, 50) * r.NextDouble(), r.Next(3, 50) * r.NextDouble(), r.Next(3, 50) * r.NextDouble(), r.Next(3, 50) * r.NextDouble() };
                }
            

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
