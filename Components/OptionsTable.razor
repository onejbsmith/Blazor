@*OptionsTable*@

@using BlazorTrader.Data

@using BlazorTrader.Components
@inject TDAOptionsTableManager mgr;

<table class="table" width="100%">

    <thead>
        <tr>
            @*
                <th>Description</th>*@
            <th width="30px"><RadzenCheckBox TValue="bool" @bind-Value="TDAParameters.isSellOptionOn" Style="margin-bottom: 5px;" Change="@(args => cancelAllocate(args))" /></th>
            <th width="30px" title="Number of strikes nearer to ITM to Skip."></th>
            <th width="80px">Sell<br />Strike</th>
            <th width="60px" class="teal">Buy<br />Long</th>
            @*<th class="teal">
                    <span style="wa"><RadzenCheckBox TValue="bool" @bind-Value="TDAParameters.isManualContracts" Style="display:inline;float:right;margin:0px 5px;" />Contracts&nbsp;</span>
                </th>*@
            <th width="120px" colspan="2">Premium</th>
            @*<th class="teal">Max<br />Loss</th>*@
            <th width="70px" class="teal">
                <span style="float:left;" title="Check to edit contract amounts">
                    <RadzenCheckBox TValue="bool" @bind-Value="TDAParameters.isManualContracts" />
                </span>
                @( TDAParameters.sellOptionIndex != -1?mgr.totalContracts.ToString():"")<br />Contracts
            </th>
            <th class="teal">@( TDAParameters.sellOptionIndex != -1?mgr.totalCredit.ToString("c0"):"")<br />Credit</th>
            <th class="teal">@( TDAParameters.sellOptionIndex != -1?mgr.totalCollateral.ToString("c0"):"")<br />Collateral</th>
            <th class="teal left nowrap">

                @if (TDAParameters.sellOptionIndex != -1)
                {
                <WebAssemblyMan.Sparkline InputData="0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15"
                                          GenerateText="true" SegmentWidth="30">
                </WebAssemblyMan.Sparkline>
                }<br />Profit Profile
            </th>
            @*<th>Breakeven</th>*@
            <th>Volume</th>
            <th>Sell<br />Bid</th>
            <th>Bid<br />Size</th>
            <th class="teal">Ask<br />Size</th>
            <th class="teal">Buy<br />Ask</th>
            <th>Delta</th>
            @*<th>Ask</th>
                <th>Size</th>*@
            @*<th>Theta</th>
                <th>Volatility</th>
                <th>Interest</th>*@
        </tr>
    </thead>
    <tbody>
        @if (TDAParameters.sellOptionIndex != -1)
        {
            mgr.totalCollateral = 0;
            mgr.totalContracts = 0;
            mgr.totalCredit = 0;
        }

        @for (int i = 0; i < TDAParameters.optionNumStrikes; i++)
        {
            #region Start Row
            if (prevOptions == null) continue;
            if (i >= prevOptions.Length) continue; // in case we added to options, prevoptions wont be as long to start

            var optionsList = lstOptions.ElementAt(i);
            TDAOptionQuote option = optionsList[0];

            var prevOptionsList = prevOptions.ElementAt(i);
            TDAOptionQuote prevOption = prevOptionsList[0];

            TDAOptionQuote longOption = new TDAOptionQuote();

            string cls = option.inTheMoney ? "itm" : "";

            mgr.getOptionQuote(i, ref option, ref longOption);

            #endregion
        <tr class='@cls'>
            <td><CheckboxOverlay i="option.index" isChecked="option.isChecked" mgr="mgr" lstOptions="lstOptions" /></td>
            <td>@(option.index + 1)</td>
            <td class="bold nowrap">
                <div style="width:27px;overflow:hidden;float:left;text-align:right;margin-right:5px;height:28px">
                    <RadzenIcon Icon="star" Style="color:red" Visible="option.index==TDAParameters.sellOptionIndex"></RadzenIcon>
                    @*<RadzenRating Stars="1" Style="display:inline" Disabled="true"
                        Value="@(?1:0)"
                        onclick="toggleSellOptionIndex(option)" />*@
                </div>@option.strikePrice
            </td>
            @code
                {
                EventCallback toggleSellOptionIndex(TDAOptionQuote option)
                {
                    if (option.index == TDAParameters.sellOptionIndex)
                        TDAParameters.sellOptionIndex = -1;

                    return new EventCallback();
                }

            }
            <td class='teal'>@option.buyOption</td>
            <td width="60px" class='@mgr.classChanged("prem", prevOption, option)'>@option.prem.ToString("n2")</td>
            <td width="60px" class='teal'>@option.prem2.ToString("n2")</td>
            @*<td class='teal @mgr.classChanged("maxLoss", prevOption, option)'>@option.maxLoss.ToString("n2")</td>*@
            <td class='teal @(option.isManualContracts ? "purpleText":"")' style="padding: 7px 10px 0px 0px;">
                @if (TDAParameters.isManualContracts)
                {
                <RadzenNumeric TValue="int" Min="0" Max="1000" Step="1" @bind-Value="option.contracts"
                               Change="@(args => ChangeContracts(args, option))"
                               Visible="option.isChecked"
                               Style="@(option.isManualContracts ? "width:70px;padding-right:10px" : "width:80px;padding-right:10px;")" />
                }
                else
                {
                <span style="position:relative;top:5px;padding:10px 0px 0px 0px;@(option.isManualContracts?"color:indianred":"")">@mgr.showChecked(option, option.contracts.ToString())</span>
                }

            </td>
            <td width="70px" class='teal'><span>@mgr.showChecked(option, option.credit.ToString("c0"))</span></td>
            <td width="70px" class='teal'><span>@mgr.showChecked(option, option.collateral.ToString("c0"))</span></td>
            <td width="225px" class='teal left nowrap'>
                @if (option.isChecked)
                {
                <WebAssemblyMan.Sparkline InputData="60,0,16,25,48,45,1,0,6,37,78,79,90,90,91,99,80,0,40,0,0,56"
                                          GenerateText="true" SegmentWidth="30">
                </WebAssemblyMan.Sparkline>
                }
            </td>            @**@
            @*<td class='@mgr.classChanged("breakeven", prevOption, option)'>@option.breakeven.ToString("n2")</td>*@
            <td width="70px" class='@mgr.classChanged("totalVolume", prevOption, option)'>@option.totalVolume.ToString("n0")</td>
            <td width="30px" class='bold @mgr.classChanged("bid", prevOption, option)'> @option.bid.ToString("n2")</td>
            <td width="30px" class='bold @mgr.classChanged("bidSize", prevOption, option)'> @option.bidSize</td>
            <td width="30px" class='teal'>@longOption.askSize</td>
            <td width="30px" class='teal'>@longOption.ask.ToString("n2")</td>
            @*<td class='@mgr.classChanged("ask", prevOption, option)'>@option.ask.ToString("n2")</td>
                <td class='@mgr.classChanged("askSize", prevOption, option)'>@option.askSize</td>*@
            <td width="40px" class='@mgr.classChanged("delta", prevOption, option)'>@option.delta.ToString("n3")</td>
            @*<td class='@mgr.classChanged("theta", prevOption, option)'>@option.theta.ToString("n3")</td>
                <td class='@mgr.classChanged("volatility", prevOption, option)'>@option.volatility.ToString("n3")</td>*@

            @*<td>@option.openInterest.ToString("n0")</td>*@
        </tr>
        }

        @*@if (TDAParameters.sellOptionIndex != -1)
            {
                spreadMgr.contractsAllocate();
            }*@

    </tbody>
    @*<tfoot>

            @if (TDAParameters.sellOptionIndex != -1)
            {
                <tr class="teal bold">
                    <td colspan="6" align="right">Total</td>
                    <td><span style="padding:0px 20px 0px 0px;">@mgr.totalContracts</span></td>
                    <td>@mgr.totalCredit.ToString("c0")</td>
                    <td>@mgr.totalCollateral.ToString("c0")</td>
                    <td colspan="99"></td>
                </tr>
            }
        </tfoot>*@
</table>

@code {

    #region parms

    private TDAOptionQuote[][] _lstOptions;
    [Parameter]
    public TDAOptionQuote[][] lstOptions
    {
        get { return _lstOptions; }
        set { _lstOptions = value; }
    }


    [Parameter]
    public TDAOptionQuote[][] prevOptions { get; set; }

    [Parameter]
    public TDAOptionQuote[][] otmOptions { get; set; }

    TDASpreadManager spreadMgr { get; set; }
    #endregion

    #region Events

    protected override async Task OnInitializedAsync()
    {
        // callOptions or putOptions
        mgr.lstOptions = this.lstOptions;
        mgr.prevOptions = this.prevOptions;
        mgr.otmOptions = this.otmOptions;

        spreadMgr = new TDASpreadManager(lstOptions);

        await Task.CompletedTask;
    }

    void ChangeContracts(dynamic value, TDAOptionQuote option)
    {
        TDAParameters.dictOptionContracts[option.description] = value;
        TDAParameters.dictIsManualContracts[option.description] = value > 0; /// Setting value to 0 resets manual flag to false
        option.isManualContracts = value > 0;
        option.contracts = value;
        /// Need to show when number is manual using another color red green blue
        /// Add the option's idndex to a parm list of manual contracts
        /// How and when to reset - when calc parm has changed
        /// use a checkbox that's on as long as one is here
        StateHasChanged();
    }

    void cancelAllocate(bool value)
    {
        if (value == false)
            TDAParameters.sellOptionIndex = -1;
    }
    #endregion
}


<style>
    .itm {
        background-color: silver;
    }

    .teal {
        color: teal;
        font-weight: bold;
    }

    .purpleText * {
        color: purple;
    }

    .left {
        text-align: left;
    }

    td, th {
        text-align: right
    }

        th:first-child, td:first-child {
            text-align: left
        }


    .hidden {
        visibility: hidden;
    }

    .nowrap {
        white-space: nowrap;
    }

    .ui-rating-cancel {
        display: none;
    }
</style>
