<img src="images/TickerTapeIcon.png" style="height:64px" />
<h3 style="display:inline">
    <RadzenLink Text="TDA Streaming Data API" Path="https://developer.tdameritrade.com/content/streaming-data" target="_blank" />
    Bid: @TDAStreamerData.bidPrice  Ask: @TDAStreamerData.askPrice Lag: @TDAStreamerData.quoteLatency
</h3>


@using BlazorTrader.Data;

@using BlazorTrader.Components;
@using System.Diagnostics;
@using System.Text;
@using Newtonsoft.Json.Linq;
@using Syncfusion.Blazor.Charts;FF
@using System.Globalization;

@*@inject IJSRuntime TDAStreamerJs;*@
@*@inject TDAApiService OptionsService*@
@*Here, I will have a test bed for TDA API Streaming
                            Perhaps have a UI that lets you select Request and Columns by Name
                            that translates into numbers for the request parameters
                            What else?
    <RadzenLink Text="TDA Streaming Data API" Path="https://developer.tdameritrade.com/content/streaming-data" target="_blank" />
                            It would return stream to what? Memory as a List of Requests
                            Could use selected column names to create table headers (or should go with Radzen?)
                            with newest data at the top,*@

    <RadzenCheckBoxList @bind-Value="values" TValue="int" Change="@((args) => Change(args, "CheckBoxList with horizontal orientation"))">
        <Items>
            <RadzenCheckBoxListItem Text="Listed Book" Value="1" />
            <RadzenCheckBoxListItem Text="Time & Sales" Value="2" />
            <RadzenCheckBoxListItem Text="Chart" Value="3" />
            <RadzenCheckBoxListItem Text="Options" Value="4" />
            <RadzenCheckBoxListItem Text="Quotes" Value="5" />
            <RadzenCheckBoxListItem Text="Actives" Value="6" />
        </Items>
    </RadzenCheckBoxList>



@*<RadzenSplitButton Text="@serviceSelection" Click="@((args) => serviceRequestChanged(args))" Style="zoom:80%">
        <ChildContent>
            <RadzenSplitButtonItem Text="All" Value="ALL" />
            <RadzenSplitButtonItem Text="Listed Book" Value="NASDAQ_BOOK" />
            <RadzenSplitButtonItem Text="Time & Sales" Value="TIMESALE_EQUITY" />
            <RadzenSplitButtonItem Text="Chart" Value="CHART_EQUITY" />
            <RadzenSplitButtonItem Text="Options" Value="OPTION" />
            <RadzenSplitButtonItem Text="Quotes" Value="QUOTE" />
        </ChildContent>
    </RadzenSplitButton>*@



<RadzenButton Text="Log In" ButtonStyle="ButtonStyle.Primary" Disabled="false" Click="Login" Size="Radzen.ButtonSize.Small" />
<RadzenButton Text="Send" ButtonStyle="ButtonStyle.Success" Disabled="false" Click="Send" Size="Radzen.ButtonSize.Small" />
<RadzenButton Text="Log Out" ButtonStyle="ButtonStyle.Warning" Disabled="false" Click="Logout" Size="Radzen.ButtonSize.Small" />
<RadzenButton Text="Start Feed" ButtonStyle="ButtonStyle.Info" Disabled="false" Click="startFeed" Size="Radzen.ButtonSize.Small" />
<RadzenButton Text="Stop Feed" ButtonStyle="ButtonStyle.Secondary" Disabled="false" Click="Ping" Size="Radzen.ButtonSize.Small" />
<br />
<BSBadge IsPill="true" class="@statusClass"><RadzenLabel Text="Status:" /><RadzenLabel Text='@status' /></BSBadge>
<BSBadge IsPill="true" class="alert-dark"><RadzenLabel Text='@clock' /></BSBadge>

<BSBadge class="alert-dark"><RadzenLabel Text='@TDAStreamerData.quotes[symbol].Count().ToString("n0")' title="Quotes" /></BSBadge>
<BSBadge class="alert-dark"><RadzenLabel Text='@TDAStreamerData.chart[symbol].Count().ToString("n0")' title="Chart 1-minute Candles" /></BSBadge>

<RadzenLabel Text="Strike:" /><RadzenLabel Text="@strike.ToString()" />
<RadzenLabel Text="Option Expiry:" />
<RadzenDatePicker Name="dtpExpiryDate" DateFormat="dddd MMM d, yyyy" Value="@optionExpDate" TValue="DateTime" />
@*<StatsBar symbol="@symbol" />*@



@*<PrintGauge symbol="@symbol" isPrintsSize="false" seconds="10" />*@

<style>
    th {
        text-align: center;
        padding: 5px;
    }

    .flex-container {
        display: flex; /* or inline-flex */
    }

    article {
        flex: 1 0 auto;
        margin-top: 50px;
        border: solid 1px green;
    }
</style>

<RadzenTextArea Style="width:100%;height:200px;margin-top:10px" Value="@logText" />
@*<PrintsDashboard symbol="@symbol" />*@

@code {


}

@*@code {

        //public ObservableCollection<SparkData> DataSource { get; set; }


        // Page Event Handlers
        //protected override async Task OnInitializedAsync()
        //{
        //    var oneMinuteAgo = (long)(DateTime.Now.ToUniversalTime().AddSeconds(-10) - new DateTime(1970, 1, 1)).TotalMilliseconds;

        //    revenue2020[0].Revenue = TDAStreamerData.timeSales[symbol].Where(t => t.level == 1 && t.time >= oneMinuteAgo).Count();
        //    revenue2020[1].Revenue = TDAStreamerData.timeSales[symbol].Where(t => t.level == 2 && t.time >= oneMinuteAgo).Count();
        //    revenue2020[2].Revenue = TDAStreamerData.timeSales[symbol].Where(t => t.level == 3 && t.time >= oneMinuteAgo).Count();
        //    revenue2020[3].Revenue = TDAStreamerData.timeSales[symbol].Where(t => t.level == 4 && t.time >= oneMinuteAgo).Count();
        //    revenue2020[4].Revenue = TDAStreamerData.timeSales[symbol].Where(t => t.level == 5 && t.time >= oneMinuteAgo).Count();

        //    Volume[0].Revenue = TDAStreamerData.timeSales[symbol].Where(t => t.level == 1).Sum(t => t.size);
        //    Volume[1].Revenue = TDAStreamerData.timeSales[symbol].Where(t => t.level == 2).Sum(t => t.size);
        //    Volume[2].Revenue = TDAStreamerData.timeSales[symbol].Where(t => t.level == 3).Sum(t => t.size);
        //    Volume[3].Revenue = TDAStreamerData.timeSales[symbol].Where(t => t.level == 4).Sum(t => t.size);
        //    Volume[4].Revenue = TDAStreamerData.timeSales[symbol].Where(t => t.level == 5).Sum(t => t.size);


        //    StateHasChanged(); await Task.CompletedTask;
        //}
    }*@


